const app = require("../app");
const debug = require("debug")("proyecto-express:server");
const http = require("http");
const { Connection } = require("../databases/mongodb/mongo-connection");
const chalk = require("chalk");
const { now } = require("../util/time");
const db = require("../databases/mysql/models/index.js");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
   var port = parseInt(val, 10);

   if (isNaN(port)) {
      // named pipe
      return val;
   }

   if (port >= 0) {
      // port number
      return port;
   }

   return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
   if (error.syscall !== "listen") {
      throw error;
   }

   var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

   // handle specific listen errors with friendly messages
   switch (error.code) {
      case "EACCES":
         console.error(bind + " requires elevated privileges");
         process.exit(1);
         break;
      case "EADDRINUSE":
         console.error(bind + " is already in use");
         process.exit(1);
         break;
      default:
         throw error;
   }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
   var addr = server.address();
   var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
   debug("Listening on " + bind);

   // Aviso de conexion del servidor
   console.log(chalk.black.bgBlue(now(), `Server listening on ${port} port`));

   // Conexion con MySQL
   await db.dbAvamcar.sync({ force: false });
   console.log(chalk.black.bgGreen(now(), "MySQL database connected"));

   // Conexion con MongoDB
   await Connection.connectToMongo();
   console.log(chalk.black.bgGreen(now(), "MongoDB database connected"));
}
